// Code generated by MockGen. DO NOT EDIT.
// Source: operations/native-executor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNativeExecutor is a mock of NativeExecutor interface
type MockNativeExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockNativeExecutorMockRecorder
}

// MockNativeExecutorMockRecorder is the mock recorder for MockNativeExecutor
type MockNativeExecutorMockRecorder struct {
	mock *MockNativeExecutor
}

// NewMockNativeExecutor creates a new mock instance
func NewMockNativeExecutor(ctrl *gomock.Controller) *MockNativeExecutor {
	mock := &MockNativeExecutor{ctrl: ctrl}
	mock.recorder = &MockNativeExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNativeExecutor) EXPECT() *MockNativeExecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockNativeExecutor) Execute(command string, args ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockNativeExecutorMockRecorder) Execute(command interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockNativeExecutor)(nil).Execute), varargs...)
}
